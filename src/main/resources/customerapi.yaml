openapi: "3.0.1"
info:
  title: Backend API Contract
  description: API contract documentation.
  version: 1.0.0
  contact:
    name: Jesus fernandez
    email: jfernmal@emeal.nttdata.com
servers:
  - url: "http://localhost:9010"
    description: Base URL for Customer Microservice
tags:
  - name: Customer
    description: Customer backend API
paths:
  /customers:
    get:
      tags:
        - Customer
      description: Retrieve all customers
      summary: Retrieve all customers
      operationId: findAll
      responses:
        "200":
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Customer
      description: Create a new customer
      summary: Create a new customer
      operationId: save
      requestBody:
        description: Customer details to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        "201":
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "400":
          description: Invalid input data

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /customers/{customer_id}:
    get:
      tags:
        - Customer
      description: Retrieve a customer by ID
      summary: Retrieve a customer by ID
      operationId: findById
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "404":
          description: Customer not found
    patch:
      tags:
        - Customer
      description: Update partially an existing customer
      summary: Update partially an existing customer
      operationId: update
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated customer details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        "200":
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "404":
          description: Customer not found
    delete:
      tags:
        - Customer
      description: Delete a customer
      summary: Delete a customer
      operationId: delete
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Customer deleted successfully
        "404":
          description: Customer not found
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the customer
        type:
          $ref: '#/components/schemas/CustomerType'
        name:
          type: string
          description: Name of the customer
        phone:
          type: string
          description: Customer's phone number
        email:
          type: string
          format: email
          description: Customer's email address
        address:
          type: string
          description: Customer's physical address
        dateOfBirth:
          type: string
          format: date
          description: Date of birth for personal customers
    CreateCustomerRequest:
      type: object
      required: [type, name]
      properties:
        type:
          $ref: '#/components/schemas/CustomerType'
        name:
          type: string
          description: Full name of the customer
          minLength: 2
          maxLength: 55
          pattern: "^[A-Za-zÀ-ÖØ-öø-ÿ'\\-\\s]+$"
    UpdateCustomerRequest:
      type: object
      required: [name, phone, email, address, dateOfBirth]
      properties:
        name:
          type: string
          description: Updated name of the customer
        phone:
          type: string
          description: Customer's phone number
          minLength: 9
          maxLength: 9
        email:
          type: string
          format: email
          description: The email address to validate.
          minLength: 10
          maxLength: 90
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        address:
          type: string
          description: Customer's physical address
          minLength: 5
          maxLength: 90
        dateOfBirth:
          type: string
          format: date
          description: The date of birth in YYYY-MM-DD format.
          minLength: 10
          maxLength: 10
    CustomerType:
      type: string
      enum:
        - personal
        - business
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string